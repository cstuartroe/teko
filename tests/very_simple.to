fn println(s: str) {
  print(s + "\n")
}

n : int = 3
n2 : int = n
n = 4
println(n2$)

b : bool = true

s : str = "hello"

s2 : str = s

println(s2)

num : int = 1 + 2 * 3 / 4 - 5 ^ 6 * 7

println(num$)

m : int = if (b) then 0 else 1

type OType = {
  foo: {
    foo: "foo",
    bar: bool,
  },
  n: 3,
}

o : OType = {
  foo: {
    foo: "foo",
    bar: true,
  },
  n: 3,
  m: 0,
}

o = {
  foo: {
    foo: "foo",
    bar: true,
  },
  n: 3,
  other_field: 0,
}

println(o.foo.foo)

arr := [1,2,3,4,5] + [6,7,8,9,10]

println(arr.at(0)$)
println(arr.size$)
println(if arr.includes(1) then "yeppers" else "nopers")
println(arr$)

fn foo(numberoony: int): int {
  x := numberoony + 3
  x * n
}

println(foo(5)$)

type Fubu = "foo" | bool

fubu : Fubu = "foo"

fubu = true

nHolder := { n }

fubutwo : Fubu = fubu
