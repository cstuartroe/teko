n : int = 3
n2 : int = n
n <- 4
print(n2$)
print("\n")

b : bool = true

s : str = "hello\n"

s2 : str = s

print(s2)

num : int = 1 + 2 * 3 / 4 - 5 ^ 6 * 7

type Binop "+" | "-" | "*" | "/" | "^" | "%" | "&&" | "||"

type Expression (
  SimpleExpression {
    etype: "simple",
    t: Token,
  } |
  BinOpExpression {
    etype: "binop",
    left: Expression,
    binop: Binop,
    right: Expression,
  }
)

class Complex(real : float, imaginary : float) {
  fn add(other : Complex) -> Complex(
    real: real + other.real,
    imaginary: imaginary + other.imaginary,
  )

  fn sub(other : Complex) -> Complex(
    real: real - other.real,
    imaginary: imaginary - other.imaginary,
  )

  fn mult(other : Complex) -> Complex(
    real: (real * other.real) - (imaginary - other.imaginary),
    imaginary:
  )
}

print(num$)

m : int = if (b) then 0 else 1

o := {
  foo: "bar",
  n: 3,
}

print(o.foo)
print("\n")

arr := [1,2,3,4,5] + [6,7,8,9,10]
print(arr.at(0)$)
print("\n")
print(arr.size$)
print("\n")
print(if arr.includes(1) then "yeppers" else "nopers")
print("\n")

print(arr$)
print("\n")

fn foo(numberoony: int): int -> do {
  x := numberoony + 3
  x * n
}

print(foo(5)$)
print("\n")
