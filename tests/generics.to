/* EXPECT ERROR

Type Error (tests/generics.to:56:9)
b = bar(false)
        ^
Actual type bool does not fulfill expected type Generic[int]   */

fn ident[T](t: T): T -> t

n: var int = ident(0)

b: var bool = ident(false)

// Structural typing extends to self-reference

// type SelfReferencer1 = {
//   x: SelfReferencer1 | str,
// }

// type SelfReferencer2 = {
//   x: SelfReferencer2 | str
// }

// sr1 : SelfReferencer1 = {x: "sr"}
// sr2 : SelfReferencer2 = sr1

// Generic types can also be present only as an attribute of other types

fn list_name[T](o: {name: T}) -> [o.name]

println(list_name({name: "boo"})$)

// println(list_name({name: 3}))

// Generics can be implicit

fn implicit_ident(t) -> t

n = implicit_ident(0)

// // Generics can even implicitly beget generics

// // Equivalent to: fn get_foo[S, T <: {foo: S}](t: T): S -> t.foo
fn get_foo(t) -> t.foo 

n = get_foo({foo: 0})

b = get_foo({foo: false})

// // Generics are subject to type inference

fn bar(t) -> 0 + t

n = bar(0)

b = bar(false)
