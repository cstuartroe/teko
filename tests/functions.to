fn foo(numberoony: int): int {
  x := numberoony + 3
  x * 6
}

println(foo(5)$)

fn f(x: int) {
  fn g() {
    fn h() -> x
  }
}

g1 := f(7)
h1 := g1()
println(h1()$)

minusOne := fn(n: int) -> n - 1

minusOne(5)$ |> println

fn defaults(m: int = 0, n: int = 4) -> (2*m) + n

println(defaults(n=6)$)

fn set_element_and_print(index: int, value: int, l: (var int)[] = [var 0, 0, 0]) {
  l[index] = 1
  println(l$)
}

l1 : (var int)[] = [var 2, 2, 2]
set_element_and_print(0, 0, l1) // [0, 2, 2]
set_element_and_print(0, 3) // [3, 0, 0]

// Try this in Python! You'll get [3, 4, 0] because default arguments refer 
// to the same object from call to call
set_element_and_print(1, 4) // [0, 4, 0]


/* EXPECT
48
7
4
6
[1, 2, 2]
[1, 0, 0]
[0, 1, 0]   */